{"ast":null,"code":"// 這邊引入了 fetch 的 polyfill，考以讓舊的瀏覽器也可以使用 fetch\nimport 'whatwg-fetch'; // 引入 actionTypes 常數\n\nimport { GET_GITHUB_INITIATE, GET_GITHUB_SUCCESS, GET_GITHUB_FAIL, CHAGE_USER_ID } from '../constants/actionTypes'; // 引入 uiActions 的 action\n\nimport { showSpinner, hideSpinner } from './uiActions'; // 這邊是這個範例的重點，要學習我們之前尚未講解的非同步 action 處理方式：不同於一般同步 action 直接發送 action，\n// 非同步 action 會回傳一個帶有 dispatch 參數的 function，裡面使用了 Ajax（這裡使用 fetch()）進行處理\n// 一般和 API 互動的流程：INIT（開始請求/秀出 spinner）-> COMPLETE（完成請求/隱藏 spinner）-> ERROR（請求失敗）\n// 這次我們雖然沒有使用 redux-actions 但我們還是維持標準 Flux Standard Action 格式：{ type: '', payload: {} }\n\nexport const getGithub = (userId = 'torvalds') => {\n  return dispatch => {\n    dispatch({\n      type: GET_GITHUB_INITIATE\n    });\n    dispatch(showSpinner());\n    fetch('https://api.github.com/users/' + userId).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      dispatch({\n        type: GET_GITHUB_SUCCESS,\n        payload: {\n          data: json\n        }\n      });\n      dispatch(hideSpinner());\n    }).catch(function (response) {\n      dispatch({\n        type: GET_GITHUB_FAIL\n      });\n    });\n  };\n}; // 同步 actions 處理，回傳 action 物件\n\nexport const changeUserId = text => ({\n  type: CHAGE_USER_ID,\n  payload: {\n    userId: text\n  }\n});","map":{"version":3,"sources":["C:/Users/85251/Desktop/React/github-finder-app/src/actions/githubActions.js"],"names":["GET_GITHUB_INITIATE","GET_GITHUB_SUCCESS","GET_GITHUB_FAIL","CHAGE_USER_ID","showSpinner","hideSpinner","getGithub","userId","dispatch","type","fetch","then","response","json","payload","data","catch","changeUserId","text"],"mappings":"AAAA;AACA,OAAO,cAAP,C,CACA;;AACA,SACEA,mBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,aAJF,QAKO,0BALP,C,CAOA;;AACA,SACEC,WADF,EAEEC,WAFF,QAGO,aAHP,C,CAKA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAM,GAAG,UAAV,KAAyB;AAChD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACAQ,IAAAA,QAAQ,CAACJ,WAAW,EAAZ,CAAR;AACAM,IAAAA,KAAK,CAAC,kCAAkCH,MAAnC,CAAL,CACGI,IADH,CACQ,UAASC,QAAT,EAAmB;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAwB,KADrD,EAEGF,IAFH,CAEQ,UAASE,IAAT,EAAe;AACnBL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,kBAAR;AAA4Ba,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAEF;AAAR;AAArC,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACD,KALH,EAMGW,KANH,CAMS,UAASJ,QAAT,EAAmB;AAAEJ,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEP;AAAR,OAAD,CAAR;AAAqC,KANnE;AAOD,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMe,YAAY,GAAIC,IAAD,KAAW;AAAET,EAAAA,IAAI,EAAEN,aAAR;AAAuBW,EAAAA,OAAO,EAAE;AAAEP,IAAAA,MAAM,EAAEW;AAAV;AAAhC,CAAX,CAArB","sourcesContent":["// 這邊引入了 fetch 的 polyfill，考以讓舊的瀏覽器也可以使用 fetch\r\nimport 'whatwg-fetch';\r\n// 引入 actionTypes 常數\r\nimport {\r\n  GET_GITHUB_INITIATE,\r\n  GET_GITHUB_SUCCESS,\r\n  GET_GITHUB_FAIL,\r\n  CHAGE_USER_ID,\r\n} from '../constants/actionTypes';\r\n\r\n// 引入 uiActions 的 action\r\nimport {\r\n  showSpinner,\r\n  hideSpinner,\r\n} from './uiActions';\r\n\r\n// 這邊是這個範例的重點，要學習我們之前尚未講解的非同步 action 處理方式：不同於一般同步 action 直接發送 action，\r\n// 非同步 action 會回傳一個帶有 dispatch 參數的 function，裡面使用了 Ajax（這裡使用 fetch()）進行處理\r\n// 一般和 API 互動的流程：INIT（開始請求/秀出 spinner）-> COMPLETE（完成請求/隱藏 spinner）-> ERROR（請求失敗）\r\n// 這次我們雖然沒有使用 redux-actions 但我們還是維持標準 Flux Standard Action 格式：{ type: '', payload: {} }\r\n\r\nexport const getGithub = (userId = 'torvalds') => {\r\n  return (dispatch) => {\r\n    dispatch({ type: GET_GITHUB_INITIATE });\r\n    dispatch(showSpinner());\r\n    fetch('https://api.github.com/users/' + userId)\r\n      .then(function(response) { return response.json() })\r\n      .then(function(json) { \r\n        dispatch({ type: GET_GITHUB_SUCCESS, payload: { data: json } });\r\n        dispatch(hideSpinner());\r\n      })\r\n      .catch(function(response) { dispatch({ type: GET_GITHUB_FAIL }) });\r\n  } \r\n}\r\n\r\n// 同步 actions 處理，回傳 action 物件\r\nexport const changeUserId = (text) => ({ type: CHAGE_USER_ID, payload: { userId: text } });"]},"metadata":{},"sourceType":"module"}